// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v61github "github.com/google/go-github/v61/github"
)

// RepositoryService is an autogenerated mock type for the RepositoryService type
type RepositoryService struct {
	mock.Mock
}

// ForkRepository provides a mock function with given fields: ctx, repoName
func (_m *RepositoryService) ForkRepository(ctx context.Context, repoName string) error {
	ret := _m.Called(ctx, repoName)

	if len(ret) == 0 {
		panic("no return value specified for ForkRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRepository provides a mock function with given fields: ctx, owner, repoName
func (_m *RepositoryService) GetRepository(ctx context.Context, owner string, repoName string) (*v61github.Repository, error) {
	ret := _m.Called(ctx, owner, repoName)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *v61github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v61github.Repository, error)); ok {
		return rf(ctx, owner, repoName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v61github.Repository); ok {
		r0 = rf(ctx, owner, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v61github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRepositoryFork provides a mock function with given fields: ctx, owner, repoName
func (_m *RepositoryService) GetUserRepositoryFork(ctx context.Context, owner string, repoName string) (*v61github.Repository, error) {
	ret := _m.Called(ctx, owner, repoName)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRepositoryFork")
	}

	var r0 *v61github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v61github.Repository, error)); ok {
		return rf(ctx, owner, repoName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v61github.Repository); ok {
		r0 = rf(ctx, owner, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v61github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositoryForks provides a mock function with given fields: ctx, repoName
func (_m *RepositoryService) ListRepositoryForks(ctx context.Context, repoName string) ([]*v61github.Repository, error) {
	ret := _m.Called(ctx, repoName)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositoryForks")
	}

	var r0 []*v61github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*v61github.Repository, error)); ok {
		return rf(ctx, repoName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*v61github.Repository); ok {
		r0 = rf(ctx, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v61github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameRepository provides a mock function with given fields: ctx, owner, name, newName
func (_m *RepositoryService) RenameRepository(ctx context.Context, owner string, name string, newName string) error {
	ret := _m.Called(ctx, owner, name, newName)

	if len(ret) == 0 {
		panic("no return value specified for RenameRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, owner, name, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryService creates a new instance of RepositoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryService {
	mock := &RepositoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
