// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v5 "github.com/go-git/go-git/v5"
)

// OpenCloner is an autogenerated mock type for the OpenCloner type
type OpenCloner struct {
	mock.Mock
}

// Clone provides a mock function with given fields: ctx, url, dest
func (_m *OpenCloner) Clone(ctx context.Context, url string, dest string) error {
	ret := _m.Called(ctx, url, dest)

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, url, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: path
func (_m *OpenCloner) Open(path string) (*v5.Repository, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *v5.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v5.Repository, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *v5.Repository); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenCloner creates a new instance of OpenCloner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenCloner(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenCloner {
	mock := &OpenCloner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
